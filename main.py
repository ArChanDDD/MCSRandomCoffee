import schedule
import telebot
from threading import Thread
from time import sleep
from telebot import types
from RandomCoffee import RandomCoffee
from Logs2File import Logs2File
import sys
import json

try:
    with open('../tokens.json', 'r') as f:
        TOKEN = json.load(f)['MCSRandomCoffeeTOKEN']
except:
    TOKEN = '6356205404:AAEXB__YD4KJ2A4CmOyUVbF0-vp1S2Bj2AM'

bot = telebot.TeleBot(TOKEN)

choose_message_to_edit = {}
message_start = {}
fac_to_ids = {"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [], "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": [], "–ù–∞—É–∫–∏ –æ –î–∞–Ω–Ω—ã—Ö": []}
id_to_fac = {}
id_to_username = {}
random_coffee_users = RandomCoffee()


def schedule_checker():
    while True:
        schedule.run_pending()
        sleep(1)


def send_update():
    global random_coffee_users, id_to_username
    pairs, not_found = random_coffee_users.get_pairs()
    try:
        with open('files/pairs_history.txt', 'a') as f:
            prep_pairs = [[id_to_username[p[0]], id_to_username[p[1]]] for p in pairs]
            prep_not_found = [id_to_username[p] for p in not_found]
            f.write('\n\n' + str(prep_pairs) + '\n' + str(prep_not_found))
    except:
        pass

    print('send pairs...')

    # Send if pair not found
    for user_id in not_found:
        bot.send_message(user_id,
                         '–ü—Ä–∏–≤–µ—Ç!\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è –ø–∞—Ä—É üò¢\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–º!')

    # Send if pair was found
    for p in pairs:
        bot.send_message(p[0],
                         '–ü—Ä–∏–≤–µ—Ç!\n' + f'–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç–≤–æ—è –ø–∞—Ä–∞ - @{id_to_username[p[1]]}\n–° —Ç–µ–±—è –≤—Å—Ç—Ä–µ—á–∞ - –≤ –∑—É–º–µ, –∏–ª–∏ –æ—á–Ω–æ, –¥—É–º–∞—é –≤—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å üòå')
        bot.send_message(p[1],
                         '–ü—Ä–∏–≤–µ—Ç!\n' + f'–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç–≤–æ—è –ø–∞—Ä–∞ - @{id_to_username[p[0]]}\n–í—Å—Ç—Ä–µ—á–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –Ω–æ –º–æ–∂–µ—à—å –∏ —Ç—ã –ø—Ä–æ—è–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É üòâ')

    remembered_ids = list(random_coffee_users.user_preferences.keys())
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        types.KeyboardButton("–î–∞"),
        types.KeyboardButton("–ù–µ—Ç")
    )
    for user_id in remembered_ids:
        bot.send_message(user_id, '–•–æ—á–µ—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Random Coffee –Ω–∞ —Å–ª–µ–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ?', reply_markup=markup)
        bot.register_next_step_handler(message_start[user_id], want_to_do_it_again)
    id_to_username = {}
    random_coffee_users = RandomCoffee(load_files=True)


def want_to_do_it_again(message):
    if message.text == '–î–∞':
        bot.send_message(message.chat.id, '–Ø –∑–Ω–∞–ª, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è üòÅ')
        random_coffee_users.add_user(message.chat.id)
        random_coffee_users.add_fac_for_user(message.chat.id)
        id_to_username[message.chat.id] = message.chat.username
        # random_coffee_users.set_status_pervak(message.chat.id)
        if random_coffee_users.type_of_user[message.chat.id] == 'kurator':
            random_coffee_users.add_preference(message.chat.id, random_coffee_users.ref_cast['–û–¥–Ω–æ–∫—É—Ä—Å–Ω–∏–∫–∏'])
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ', callback_data=random_coffee_users.ref_cast['–ì–æ—Ç–æ–≤–æ']))
            message_id = bot.send_message(message.chat.id,
                                          '–¢—ã –∫—É—Ä–∞—Ç–æ—Ä, –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–≤–∞–∫–∞–º–∏))0)',
                                          reply_markup=markup).message_id
        else:
            markup = random_coffee_users.get_preferences_markup_for_user(message.chat.id)
            message_id = bot.send_message(message.chat.id,
                                          '–í—ã–±–µ—Ä–∏, –≤—Å–µ—Ö, —Å –∫–µ–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–æ–±—â–∞—Ç—å—Å—è, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ"',
                                          reply_markup=markup).message_id
        choose_message_to_edit[message.chat.id] = message_id


def agree_or_not(message):
    if message.text == '–î–∞':
        random_coffee_users.add_user(message.chat.id)
        id_to_username[message.chat.id] = message.chat.username
        print(f'new user - {message.chat.id}')
        print(f'Total users: {len(random_coffee_users.user_preferences)}')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        btn2 = types.KeyboardButton("–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
        btn3 = types.KeyboardButton("–ù–∞—É–∫–∏ –æ –î–∞–Ω–Ω—ã—Ö")
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ!\n–°–∫–∞–∂–∏, –∫–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?', reply_markup=markup)
        bot.register_next_step_handler(message, choose_program)
    elif message.text == '–ù–µ—Ç':
        bot.send_message(message.chat.id, '–ù—É –ª–∞–¥–Ω–æ üò¢')
    else:
        bot.send_message(message.chat.id, '–õ—É—á—à–µ –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ üôÉ')
        bot.register_next_step_handler(message, agree_or_not)


def choose_program(message):
    if message.text in ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ù–∞—É–∫–∏ –æ –î–∞–Ω–Ω—ã—Ö"]:
        random_coffee_users.add_fac_for_user(message.chat.id, message.text)
        id_to_fac[message.chat.id] = message.text
        fac_to_ids[message.text].append(message.chat.id)
        random_coffee_users.set_status_pervak(message.chat.id)
        markup = random_coffee_users.get_preferences_markup_for_user(message.chat.id)
        message_id = bot.send_message(message.chat.id,
                                      '–í—ã–±–µ—Ä–∏, –≤—Å–µ—Ö, —Å –∫–µ–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–æ–±—â–∞—Ç—å—Å—è, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ"',
                                      reply_markup=markup).message_id
        choose_message_to_edit[message.chat.id] = message_id
    else:
        bot.send_message(message.chat.id, '–õ—É—á—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ üôÉ')
        bot.register_next_step_handler(message, choose_program)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id
    if call.data == 'choose_done':
        if len(random_coffee_users.user_preferences[chat_id]) == 0:
            bot.send_message(chat_id, '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
            return
        bot.edit_message_text(f'–¢—ã –≤—ã–±—Ä–∞–ª: {",".join(random_coffee_users.get_preferences(chat_id))}', chat_id,
                              choose_message_to_edit[chat_id])
        bot.send_message(chat_id, '–Ø —Ç–µ–±—è –∑–∞–ø–∏—Å–∞–ª!\n–í–µ—Ä–Ω—É—Å—å –≤ —Å—É–±–±–æ—Ç—É —Å –ø–∞—Ä–æ–π üòâ')
        bot.send_message(chat_id, '–ï—Å–ª–∏ —Ä–µ—à–∏—à—å —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å - –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∑–∞–Ω–æ–≤–æ!')
        print(f'User {chat_id} preference is {random_coffee_users.get_preferences(chat_id)}')
        return
    random_coffee_users.add_preference(chat_id, call.data)
    markup = random_coffee_users.get_preferences_markup_for_user(chat_id)
    bot.edit_message_text('–í—ã–±–µ—Ä–∏, –≤—Å–µ—Ö, —Å –∫–µ–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–æ–±—â–∞—Ç—å—Å—è, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ"', chat_id,
                          choose_message_to_edit[chat_id], reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.username is None:
        bot.send_message(message.chat.id,
                         '–ö–∞–∂–µ—Ç—Å—è, —É —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω nickname –≤ telegram, —è –Ω–µ —Å–º–æ–≥—É –¥–∞—Ç—å –Ω–∞ —Ç–µ–±—è —Å—Å—ã–ª–∫—É üò¢\n–£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è - —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞—è —à—Ç—É–∫–∞, —É–∂ –ø–æ–≤–µ—Ä—å)')
        return
    chat_id = message.chat.id
    message_start[chat_id] = message
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–î–∞")
    btn2 = types.KeyboardButton("–ù–µ—Ç")
    markup.add(btn1, btn2)
    bot.send_message(chat_id,
                     '–ü—Ä–∏–≤–µ—Ç!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ª—é–¥–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è, –∞ —è –≤—ã–±–µ—Ä—É —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üòÅ\n–ù–∞—á–Ω–µ–º?',
                     reply_markup=markup)
    bot.register_next_step_handler(message, agree_or_not)


@bot.message_handler(commands=['stop'])
def stop(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–¢–µ–ø–µ—Ä—å —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ Random Coffee')
    random_coffee_users.remove_user(chat_id)


# KURATOR MODE
@bot.message_handler(commands=['kurator_mode'])
def kurator_mode(message):
    chat_id = message.chat.id
    if random_coffee_users.is_user_enable(chat_id):
        random_coffee_users.set_status_kurator(chat_id)
        if chat_id in choose_message_to_edit.keys():
            bot.edit_message_text('–†–µ–∂–∏–º –∫—É—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ - –ü–µ—Ä–≤–∞–∫–∏.', chat_id,
                                  choose_message_to_edit[chat_id])
    else:
        bot.send_message(chat_id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫')
        return
    print(f'new kurator - {chat_id}')
    bot.send_message(chat_id,
                     '–ó–∞–ø–æ–º–Ω–∏–ª —Ç–µ–±—è –∫–∞–∫ –∫—É—Ä–∞—Ç–æ—Ä–∞ üòé\n–¢–µ–ø–µ—Ä—å —Å —Ç–æ–±–æ–π —Å–º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–≤–æ–∏ –¥–µ—Ç–∏.üë®‚Äçüëß‚Äçüëß –£–≤—ã, —Ç–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞.')


if __name__ == "__main__":
    sys.stdout = Logs2File('files/log.txt', 'a')
    scheduleThread = Thread(target=schedule_checker)
    scheduleThread.daemon = True
    scheduleThread.start()
    #schedule.every(1).day.at('14:00').do(send_update)
    schedule.every(1).hour.do(send_update)
    bot.polling()
